#! /usr/bin/env python
import rospy
from sensor_msgs.msg import Imu, CompressedImage
import io
import time
import numpy as np
import picamera
from picamimupublisher.MPU6050 import MPU6050
from threading import Thread

## PiCamera Class
class picam(Thread):
    def __init__(self, width = 640, height = 480, quality = 8, rate = 25):
        Thread.__init__(self)
        self.image_pub = rospy.Publisher('/pidrone/image/compressed', CompressedImage, queue_size=1)
        self.pixels = (width, height)
        self.quality = quality
        self.stream = io.BytesIO()
        self.elapsed = 0
        self.rate_cam = rospy.Rate(rate)
        self.running = True
        try:
            self.camera = picamera.PiCamera()
            self.camera.resolution = self.pixels
            self.camera.framerate = rate
            #camera.iso = 100
            self.camera.vflip = True
            self.camera.hflip = True
            self.camera.shutter_speed = self.camera.exposure_speed
            #self.camera.color_effects = (128,128)
            self.camera.exposure_mode = 'fixedfps'
            #g = camera.awb_gains
            #camera.awb_mode = 'off'
            #camera.awb_gains = g
            print "camera initialised"
        except:
            print "can't initialise camera"

    def run(self):
        try:
            image = CompressedImage()
            # Use the video-port for captures...
            for foo in self.camera.capture_continuous(self.stream, 'jpeg',
                        quality=self.quality, use_video_port=True):
                if not self.running:
                    break
                #publish images here
                image.header.stamp = rospy.Time.now()
                image.header.frame_id = "camera_link"
                image.format = "jpeg"
                image.data = np.frombuffer(self.stream.getvalue(), dtype=np.dtype('uint8')).tostring()
                self.stream.seek(0)
                self.stream.truncate()
                self.image_pub.publish(image)
                self.rate_cam.sleep()
        except KeyboardInterrupt:
            print "KeyboardInterrupt"
            self.running = False
            self.camera.close()

        except Exception:
              print "Image Capture Failed..."
              self.running = False
              self.camera.close()

class Imu_send(Thread):
    def __init__(self, rate = 250):
        self.imu_pub = rospy.Publisher('/pidrone/imu', Imu, queue_size=1)
        self.sensor = MPU6050(0x68)
        self.rate_imu = rospy.Rate(rate)
        self.orientation_covariance = [-1.0, 0.0, 0.0,
                                        0.0, 0.0, 0.0,
                                        0.0, 0.0, 0.0]
        self.angular_velocity_covariance = [-1.0, 0.0, 0.0,
                                             0.0, 0.0, 0.0,
                                             0.0, 0.0, 0.0]
        self.linear_acceleration_covariance = [0.0, 0.0, 0.0,
                                               0.0, 0.0, 0.0,
                                               0.0, 0.0, 0.0]
        print "Imu initialised"

    def imu_send(self):
        try:
            imu = Imu()
            accel_data = self.sensor.get_accel_data()
            gyro_data = self.sensor.get_gyro_data()

            #publish imu here
            imu.header.stamp = rospy.Time.now()
            imu.header.frame_id = "imu_link"

            imu.orientation_covariance = self.orientation_covariance
            imu.angular_velocity_covariance = self.angular_velocity_covariance
            imu.linear_acceleration_covariance = self.linear_acceleration_covariance

            imu.linear_acceleration.x = accel_data['x']
            imu.linear_acceleration.y = accel_data['y']
            imu.linear_acceleration.z = accel_data['z']

            imu.angular_velocity.x = gyro_data['x']
            imu.angular_velocity.y = gyro_data['y']
            imu.angular_velocity.z = gyro_data['z']

            self.imu_pub.publish(imu)
            self.rate_imu.sleep()

        except KeyboardInterrupt:
            print "KeyboardInterrupt"

        except Exception:
            print "Imu read failed..."


if __name__ == '__main__':
    rospy.init_node('pidrone_publisher', anonymous=True)
    camSend = picam(rate = 30)
    imuSend = Imu_send(rate = 150)
    print "Started ROS node"
    camSend.daemon = True
    camSend.start()

    while not rospy.is_shutdown():
        if camSend.running:
            try:
                imuSend.imu_send()
            except rospy.ROSInterruptException:
                camSend.running = False
                break
